open Nethereum.Web3
open Nethereum.Web3.Accounts

// Create an account with our private key:
let createAccount () =
    let privateKey = "0x7580e7fb49df1c861f0050fae31c2224c6aba908e116b8da44ee8cd927b990b0"
    let account = Account(privateKey)
    printfn "Our account: %A" account.Address
    account

// An instance of Web3 pointing to our Nethereum testchain:
let generateWeb3Instance (account: Account) =
    Web3(account = account, url = "http://testchain.nethereum.com:8545")

// Check the balance of an account:
let checkBalance (web3: Web3) (account: string) =
    let balance =
        web3.Eth.GetBalance.SendRequestAsync account
        |> Async.AwaitTask
        |> Async.RunSynchronously
    printfn "Balance is: %A Wei" balance
    let balanceInEther = Web3.Convert.FromWei balance.Value
    printfn "Balance is: %A Ether" balanceInEther

// Transfer 1.11 Ether:
let transferEther (web3: Web3) (receiverAccount: string) =
    let etherToTransfer = decimal 1.11
    web3.Eth.GetEtherTransferService()
        .TransferEtherAndWaitForReceiptAsync(toAddress = receiverAccount, etherAmount = etherToTransfer)
    |> Async.AwaitTask
    |> Async.RunSynchronously
    |> ignore

[<EntryPoint>]
let main argv =
    let web3 =
        createAccount ()
        |> generateWeb3Instance
    let receiverAccount = "0x13f022d72158410433cbd66f5dd8bf6d2d129924"
    printfn "Checking receiver account's balance before sending Ether..."
    checkBalance web3 receiverAccount
    transferEther web3 receiverAccount
    printfn "Checking receiver account's balance after sending Ether..."
    checkBalance web3 receiverAccount
    0
